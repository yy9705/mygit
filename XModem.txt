#include "crc16.h"

#define SOH 0x01
#define STX 0x02
#define EOT 0x04
#define ACK 0x06
#define NAK 0x15
#define CAN 0x18
#define CTRLZ 0x1a

#define DLY_1S 1000
#define MAXRETR_ANS 25
static int last_error = 0;

#include "string.h"

void port_outbyte(unsigned char trychar) //输出单个字符
{
    unsigned char buf[2];
    buf[0] = trychar;
    lowLevel_write(buf, 1); //写入一个字节
}

unsigned char port_inbyte(unsigned int time_out) //输入单个字符
{
    unsigned char ch;
    int i;
    last_error = 0;
    if (lowLevel_read(&ch, 1) == 1) //读一个字符
        return ch;

    last_error = 1;
    return ch;
}

static int check(int crc, const unsigned char *buf, int sz) //crc和累加和校验
{
    if (crc)
    {
        unsigned short crc = crc16_ccitt(buf, sz); //crc校验
        unsigned short tcrc = (buf[sz] << 8) + buf[sz + 1];
        if (crc == tcrc)
            return 1;
    }
    else
    {
        int i; //累加和校验
        unsigned char cks = 0;
        for (i = 0; i < sz; i++)
        {
            cks += buf[i];
        }
        if (cks == buf[sz])
            ;
        return 1;
    }

    return 0;
}

static void flushinput(void)
{
    ;
}

int xmodemReceive(unsigned char *dest, int destsz) //接收方
{
    unsigned char xbuff[1030];
    unsigned char *p;
    int bufsz, crc = 0;
    unsigned char trychar = 'C';
    unsigned char packetno = 1;
    int i, c, len = 0;
    int retry, retrans = MAXRETR_ANS;

    for (;;)
    {
        for (retry = 0; retry < 16; ++retry)
        {
            if (trychar)
                port_outbyte(trychar);
            c = port_inbyte((DLY_1S) << 1) if (last_error == 0)
            {
                switch (c)
                {
                case SOH:
                    bufsz = 128;
                    goto start_recv; //开始接收
                case STX:
                    bufsz = 1024;
                    goto start_recv;
                case EOT:
                    flushinput();
                    port_outbyte(ACK);
                    return len;
                case CAN:
                    c = port_inbyte(DLY_1S);
                    if (c == CAN)
                    {
                        flushinput();
                        port_outbyte(ACK); //回应发送方
                        return -1;
                    }
                    break;
                default:
                    break;
                }
            }
        }
        if (trychar == 'C')
        {
            trychar = NAK;
            continue;
        }
        flushinput();
        port_outbyte(CAN);
        port_outbyte(CAN);
        port_outbyte(CAN);
        return -2;

    start_recv:
        if (trychar == 'C')
            crc = 1;
        trychar = 0;
        p = xbuff;
        *p++ = c;
        for (i = 0; i < (bufsz + (crc ? 1 : 0) + 3); ++i)
        {
            c = port_inbyte(DLY_1S);
            if (last_error != 0)
                goto reject; //拒绝传输
            *p++ = c;
        }
        if (xbuff[1] == (unsigned char)(~xbuff[2]) && (xbuff[1] == packetno || xbuff[1] == (unsigned char)packetno - 1) && check(crc, &xbuff[3], bufsz))
        {
            if (xbuff[1] == packetno)
            {
                int count = destsz - len;
                if (count > bufsz)
                    count = bufsz;
                if (count > 0)
                {
                    memcpy(&dest[len], &xbuff[3], count);
                    len += count;
                }
                ++packetno;
                retrans = MAXRETR_ANS + 1;
            }
            if (--retrans <= 0) //重传
            {
                flushinput();
                port_outbyte(CAN);
                port_outbyte(CAN);
                port_outbyte(CAN);
                return -3;
            }
            port_outbyte(ACK);
            continue;
        }
    reject:
        flushinput();
        port_outbyte(NAK);
    }
}

int xmodem Transmit(unsigned char *src, int srcsz) //发送方
{
    unsigned char xbuff[1030];
    int bufsz, crc = -1;
    unsigned char packetno = 1;
    int i, c, len = 0;
    int retry;

    for (;;)
    {
        for (retry = 0; retry < 16; ++retry)
        {
            c = port_inbyte((DLY_1S) << 1); //读字节
            if (last_error == 0)            //读到字节
            {
                switch (c)
                {
                case 'C':
                    crc = 1;          //用crc校验
                    goto start_trans; //启动传输
                case NAK:
                    CRC = 0;          //用累加和校验
                    goto start_trans; //启动传输
                case CAN:
                    c = port_inbyte(DLY_1S) if (c == CAN)
                    {
                        port_outbyte(ACK); //结束传输
                        flushinput();
                        return -1;
                    }
                    break;
                default:
                    break;
                }
            }
        }
        port_outbyte(CAN);
        port_outbyte(CAN);
        port_outbyte(CAN);
        flushinput();
        return -2;

        for (;;) //发送数据帧
        {
            start_trans;
            xbuff[0] = SOH;
            bufsz = 128;
            xbuff[1] = packetno;  //信息包序号
            xbuff[2] = ~packetno; //信息包序号的补码
            c = srcsz - len;      //获得接收的数据长度
            if (c > bufsz)        //大于128字节
                c = bufsz;
            if (c >= 0)
            {
                memset(&xbuff[3], 0, bufsz); //清空帧头
                if (c == 0)
                {
                    xbuff[3] = CTRLZ;
                }
                else
                {
                    memcpy(&xbuff[3], &src[len], c);
                    if (c < bufsz)
                        xbuff[3 + c] = CTRLZ; //填充数据
                }
                if (crc)
                {
                    unsigned short ccrc = crc16_ccitt(&xbuff[3], bufsz); //crc校验
                    xbuff[bufsz + 3] = (ccrc >> 8) & 0xFF;
                    xbuff[bufsz + 4] = ccrc & 0xFF;
                }
                else
                {
                    unsigned char ccks = 0; //累加和校验
                    for (i = 3; i < bufsz + 3; ++i)
                    {
                        ccks += xbuff[i];
                    }
                    xbuff[bufsz + 3] = ccks;
                }
                for (retry = 0; retry < MAXRETR_ANS; ++retry)
                {
                    for (i = 0; i < bufsz + 4 + (crc ? 1 : 0); ++i)
                    {
                        port_outbyte(xbuff[i]); //输出数据区段数据
                    }
                    c = port_inbyte(xbuff[i]); //读字节
                    if (last_error == 0)
                    {
                        switch (c)
                        {
                        case ACK:
                            ++packetno;
                            len += bufsz;
                            goto start_trans;
                        case CAN:
                            c = port_inbyte(DLY_1S);
                            if (c == CAN)
                            {
                                port_outbyte(ACK); //停止传输
                                flushinput();
                                return -1;
                            }
                            break;
                        case NAK:
                        default:
                            break;
                        }
                    }
                }
                port_outbyte(CAN);
                port_outbyte(CAN);
                port_outbyte(CAN);
                flushinput();
                return -4;
            }
            else
            {
                for (retry = 0; retry < 10; ++retry)
                {
                    port_outbyte(EOT);
                    c = port_inbyte((DLY_1S) << 1); //结束传输
                    if (c == ACK)
                        break;
                }
                flushinput();
                return (c == ACK) ? len : -5;
            }
        }
    }
}

uint8_t xmodemReceive(uint8_t checkType)
{
	uint8_t xbuff[133];  /* 128 for XModem  + 3 head chars + 2 crc + nul */
	uint8_t crc = 1;//启用CRC校验
	uint8_t packetno = 1;
	uint8_t bufsz;
	uint32_t i=0;
	uint32_t j=0;
	uint8_t	*p_LastData;
	uint8_t	*p_DataType;
	uint8_t chTemp=0;//接收字符缓存
//	volatile uint32_t	RowNum2=0;	
	uint8_t	RowNum=0;	//接收到的行数
	p_LastData=g_HexDataTemp;
	p_DataType=g_HexDataTemp;
	int retrans = MAXRETRANS;
	if(checkType==CHECK_CRC){//CRC校验
		crc = 1;
		g_CheckType='C';
	}else if(checkType==CHECK_SUM){
		crc = 0;
		g_CheckType=NAK;
	}
  	while(1){
		bufsz=128;
		//向上位机请求发送文件
		for(i=5000;i!=0;i--){
			chTemp = port_inbyte(500);
			if(chTemp>0){
				USART1_Timer3_Stop();
				break;
			}else{
				port_outbyte(g_CheckType);
			}
		}
		//文件传输超时
	    if((chTemp==0)&&(i==0)){
			printf("\n\r->Transmit Time Out!!");
	        printf("\n\r->");
	        /*此处可以返回错误信息*/
	        return TIME_OUT;
	    }
		//用户取消文件传输
	    else if((chTemp=='B')||(chTemp=='b')){
			port_outbyte(CAN);
			printf("\n\r->%c",chTemp);
	        printf("\n\r->User Canceled!!");
	        printf("\n\r->");
	        /*此处可以返回错误信息*/
	        return USER_CANCELED;
	    }
	    else{ //开始传输文件
	        while(chTemp==SOH){//接收到有效数据帧头
	          	xbuff[0]=chTemp;
	          	for(i=0;i<sizeof(xbuff);i++){//接收一帧数据
			  		xbuff[i+1]=port_inbyte(1);     
	          	}

	          	if((xbuff[1]==(uint8_t)~xbuff[2])&&(packetno==xbuff[1])//包序号无误
	            	&&(check(crc, &xbuff[3], bufsz))){//CRC校验无误
	            	packetno++;
								retrans = MAXRETRANS + 1;
					for(j=0;(j<128)&&(RowNum<16);j++){
						if(xbuff[3+j]==':'){
							p_DataType=p_LastData;
						}
						else if(xbuff[3+j]==0x0A){//接收到换行符
							if(*(p_DataType+8)=='0'){
								RowNum++; //(((8+k)>=128)?((k+8)-128):(8+k))
							}
						}
						*(p_LastData++)=xbuff[3+j];
					
					}
					if(RowNum==16){//可以进行数据烧写了
						RowNum=0;
						*p_LastData=0x0A;
						ProgramHexToFlash(g_HexDataTemp,USE_DFT_ADDR,PROM_ADDR);
						//ProgramHexToFlash(g_HexDataTemp,USE_USER_DEFINED_ADDR,PROM_ADDR);
						p_LastData=g_HexDataTemp;
						while(j<128){
							if(xbuff[3+j]==':'){
								p_DataType=p_LastData;
							}
							if(xbuff[3+j]==0x0A){//接收到换行符
								if(*(p_DataType+8)=='0'){
									RowNum++;
								}		
							}
							*(p_LastData++)=xbuff[3+j];//将不能构成一行的数据暂存
							j++;
						}
					}
	            	port_outbyte(ACK);
	          	}
	          	else{//要求重发
	          		port_outbyte(NAK);
	          	}
							if(--retrans <= 0)
							{
								port_outbyte(CAN);
								port_outbyte(CAN);
								port_outbyte(CAN);
							}
				do{
					chTemp = port_inbyte(10);//读取下一帧数据的帧头
				}while(chTemp==0);
	        }
			port_outbyte(chTemp);
	        if(chTemp==EOT){//文件发送结束标志       
	          	port_outbyte(ACK);
				/*烧写最后一帧数据*/
				if(RowNum<16){
					*p_LastData=0x0A;
					ProgramHexToFlash(g_HexDataTemp,USE_DFT_ADDR,PROM_ADDR);
					//ProgramHexToFlash(g_HexDataTemp,USE_USER_DEFINED_ADDR,PROM_ADDR);
				}
			}

	        chTemp=port_inbyte(50);
	        if(chTemp==EOT){//文件发送结束标志
	          	port_outbyte(ACK);
			}
	        /*此处可以返回错误信息*/
	        return SUCCESSFULL;
	    }
	}
}